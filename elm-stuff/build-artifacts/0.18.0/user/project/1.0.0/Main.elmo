var _user$project$Main$headerView = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('navbar navbar-inverse avbar-fixed-top'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('container'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('collapse navbar-collapse'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('bs-example-navbar-collapse-1'),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$ul,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('nav navbar-brand'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$li,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$a,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$href('#'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Todo App'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	});
var _user$project$Main$jsonify = function (todoItem) {
	return _elm_lang$http$Http$jsonBody(
		_elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'id',
					_1: _elm_lang$core$Json_Encode$string(todoItem.id)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'todoNumber',
						_1: _elm_lang$core$Json_Encode$int(todoItem.todoNumber)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'message',
							_1: _elm_lang$core$Json_Encode$string(todoItem.message)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'complete',
								_1: _elm_lang$core$Json_Encode$bool(todoItem.complete)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _user$project$Main$put = F2(
	function (todoItem, todoItemDecoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'PUT',
				headers: {ctor: '[]'},
				url: A2(_elm_lang$core$Basics_ops['++'], 'localhost:8080/todo-service/todo/', todoItem.id),
				body: _user$project$Main$jsonify(todoItem),
				expect: _elm_lang$http$Http$expectJson(todoItemDecoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$Model = function (a) {
	return {todoItems: a};
};
var _user$project$Main$TodoItem = F4(
	function (a, b, c, d) {
		return {id: a, todoNumber: b, message: c, complete: d};
	});
var _user$project$Main$todoItemDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Main$TodoItem,
	A2(_elm_lang$core$Json_Decode$field, 'id', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'todoNumber', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'complete', _elm_lang$core$Json_Decode$bool));
var _user$project$Main$todoItemListDecoder = _elm_lang$core$Json_Decode$list(_user$project$Main$todoItemDecoder);
var _user$project$Main$UpdatedTodo = function (a) {
	return {ctor: 'UpdatedTodo', _0: a};
};
var _user$project$Main$updateTodoItem = function (todoItem) {
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$UpdatedTodo,
		A2(_user$project$Main$put, todoItem, _user$project$Main$todoItemDecoder));
};
var _user$project$Main$UpdateTodo = function (a) {
	return {ctor: 'UpdateTodo', _0: a};
};
var _user$project$Main$SetIncomplete = function (a) {
	return {ctor: 'SetIncomplete', _0: a};
};
var _user$project$Main$SetComplete = function (a) {
	return {ctor: 'SetComplete', _0: a};
};
var _user$project$Main$todoView = function (todo) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('todo-container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('w3-panel w3-card-4 row'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('col-md-3'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$input,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$checked(todo.complete),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onCheck(
														function (on) {
															return on ? _user$project$Main$SetComplete(todo.id) : _user$project$Main$SetIncomplete(todo.id);
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('col-md-7'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(todo.message),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Main$headerView,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('container'),
						_1: {ctor: '[]'}
					},
					A2(_elm_lang$core$List$map, _user$project$Main$todoView, model.todoItems)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('w3-panel w3-card-4 todo-container row'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('fa fa-plus col-md-3'),
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('col-md-7'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('  Add Todo'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$LoadedTodos = function (a) {
	return {ctor: 'LoadedTodos', _0: a};
};
var _user$project$Main$getTodoItems = function (todoItem) {
	var url = 'http://localhost:8080/todo-service/todos';
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Main$LoadedTodos,
		A2(_elm_lang$http$Http$get, url, _user$project$Main$todoItemListDecoder));
};
var _user$project$Main$init = function (todoItems) {
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$Model(todoItems),
		_1: _user$project$Main$getTodoItems(todoItems)
	};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'AddTodo':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'LoadTodos':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$getTodoItems(model.todoItems)
				};
			case 'LoadedTodos':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _user$project$Main$Model(_p0._0._0),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SetComplete':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetIncomplete':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateTodo':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$updateTodoItem(_p0._0)
				};
			default:
				if (_p0._0.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Main$init(
			{ctor: '[]'}),
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: _user$project$Main$subscriptions
	})();
var _user$project$Main$LoadTodos = {ctor: 'LoadTodos'};
var _user$project$Main$AddTodo = {ctor: 'AddTodo'};
